/**
* DigitalRooster
* Open API for Digital Rooster
*
* The version of the OpenAPI document: 0.8.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * InternetRadioApi.h
 *
 * 
 */

#ifndef InternetRadioApi_H_
#define InternetRadioApi_H_


#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>


#include "Error.h"
#include "Station.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class  InternetRadioApi {
public:
    InternetRadioApi(std::shared_ptr<Pistache::Rest::Router>);
    virtual ~InternetRadioApi() {}
    void init();

    const std::string base = "/v1";

private:
    void setupRoutes();

    void streams_create_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void streams_delete_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void streams_read_all_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void streams_read_one_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void streams_update_one_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void internet_radio_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    std::shared_ptr<Pistache::Rest::Router> router;

    /// <summary>
    /// Create a station info and add it to the list
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="station">Internet radio station to create</param>
    virtual void streams_create(const Station &station, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Delete Internet radio station from list
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="uid">unique id to identify item</param>
    virtual void streams_delete(const std::string &uid, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Read all Internet radio streams
    /// </summary>
    /// <remarks>
    /// returns a list of Internet radio streams
    /// </remarks>
    /// <param name="length">max items returned (optional, default to 0)</param>
    /// <param name="offset">offset from start of list (optional, default to 0)</param>
    virtual void streams_read_all(const Pistache::Optional<int32_t> &length, const Pistache::Optional<int32_t> &offset, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Read one Internet radio station
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="uid">unique id to identify item</param>
    virtual void streams_read_one(const std::string &uid, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Update Internet radio station information
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="uid">unique id to identify item</param>
    /// <param name="station">new content of internet radio station</param>
    virtual void streams_update_one(const std::string &uid, const Station &station, Pistache::Http::ResponseWriter &response) = 0;

};

}
}
}
}

#endif /* InternetRadioApi_H_ */

