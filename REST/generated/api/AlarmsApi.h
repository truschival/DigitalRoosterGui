/**
* DigitalRooster
* Open API for Digital Rooster
*
* The version of the OpenAPI document: 0.8.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * AlarmsApi.h
 *
 * 
 */

#ifndef AlarmsApi_H_
#define AlarmsApi_H_


#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>


using Alarm = DigitalRooster::Alarm;
#include "Error.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class  AlarmsApi {
public:
    AlarmsApi(std::shared_ptr<Pistache::Rest::Router>);
    virtual ~AlarmsApi() {}
    void init();

    const std::string base = "/v1";

private:
    void setupRoutes();

    void alarms_create_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void alarms_delete_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void alarms_read_all_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void alarms_read_one_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void alarms_update_one_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void alarms_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    std::shared_ptr<Pistache::Rest::Router> router;

    /// <summary>
    /// Create a new alarm entry and add it to the list
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="alarm">Alarm object to create</param>
    virtual void alarms_create(const Alarm &alarm, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Delete alarm from list
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="uid">unique id to identify item</param>
    virtual void alarms_delete(const std::string &uid, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Read all Alarms
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="length">max items returned (optional, default to 0)</param>
    /// <param name="offset">offset from start of list (optional, default to 0)</param>
    virtual void alarms_read_all(const Pistache::Optional<int32_t> &length, const Pistache::Optional<int32_t> &offset, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Read one Alarm
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="uid">unique id to identify item</param>
    virtual void alarms_read_one(const std::string &uid, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Update alarm
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="uid">unique id to identify item</param>
    /// <param name="alarm">new content of alarm</param>
    virtual void alarms_update_one(const std::string &uid, const Alarm &alarm, Pistache::Http::ResponseWriter &response) = 0;

};

}
}
}
}

#endif /* AlarmsApi_H_ */

