# coding: utf-8

"""
    DigitalRooster

    Open API for Digital Rooster  # noqa: E501

    The version of the OpenAPI document: 0.8.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Alarm(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'time': 'str',
        'period': 'str',
        'url': 'str',
        'enabled': 'bool',
        'volume': 'int',
        'uid': 'str'
    }

    attribute_map = {
        'time': 'time',
        'period': 'period',
        'url': 'url',
        'enabled': 'enabled',
        'volume': 'volume',
        'uid': 'uid'
    }

    def __init__(self, time=None, period=None, url=None, enabled=None, volume=None, uid=None, local_vars_configuration=None):  # noqa: E501
        """Alarm - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._time = None
        self._period = None
        self._url = None
        self._enabled = None
        self._volume = None
        self._uid = None
        self.discriminator = None

        self.time = time
        self.period = period
        self.url = url
        self.enabled = enabled
        if volume is not None:
            self.volume = volume
        if uid is not None:
            self.uid = uid

    @property
    def time(self):
        """Gets the time of this Alarm.  # noqa: E501


        :return: The time of this Alarm.  # noqa: E501
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this Alarm.


        :param time: The time of this Alarm.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and time is None:  # noqa: E501
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    @property
    def period(self):
        """Gets the period of this Alarm.  # noqa: E501


        :return: The period of this Alarm.  # noqa: E501
        :rtype: str
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this Alarm.


        :param period: The period of this Alarm.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and period is None:  # noqa: E501
            raise ValueError("Invalid value for `period`, must not be `None`")  # noqa: E501
        allowed_values = ["once", "daily", "workdays", "weekends"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and period not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `period` ({0}), must be one of {1}"  # noqa: E501
                .format(period, allowed_values)
            )

        self._period = period

    @property
    def url(self):
        """Gets the url of this Alarm.  # noqa: E501


        :return: The url of this Alarm.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Alarm.


        :param url: The url of this Alarm.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and url is None:  # noqa: E501
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def enabled(self):
        """Gets the enabled of this Alarm.  # noqa: E501


        :return: The enabled of this Alarm.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Alarm.


        :param enabled: The enabled of this Alarm.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and enabled is None:  # noqa: E501
            raise ValueError("Invalid value for `enabled`, must not be `None`")  # noqa: E501

        self._enabled = enabled

    @property
    def volume(self):
        """Gets the volume of this Alarm.  # noqa: E501


        :return: The volume of this Alarm.  # noqa: E501
        :rtype: int
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this Alarm.


        :param volume: The volume of this Alarm.  # noqa: E501
        :type: int
        """

        self._volume = volume

    @property
    def uid(self):
        """Gets the uid of this Alarm.  # noqa: E501


        :return: The uid of this Alarm.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Alarm.


        :param uid: The uid of this Alarm.  # noqa: E501
        :type: str
        """

        self._uid = uid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Alarm):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Alarm):
            return True

        return self.to_dict() != other.to_dict()
